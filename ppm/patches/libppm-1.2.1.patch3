diff --git a/src/map/ghost_map_symmetry_bc_uy.inc b/src/map/ghost_map_symmetry_bc_uy.inc
index 61c4f05..d8a5797 100644
--- a/src/map/ghost_map_symmetry_bc_uy.inc
+++ b/src/map/ghost_map_symmetry_bc_uy.inc
@@ -52,7 +52,7 @@
         xt(1,k)   = xt(1,i)
         xt(2,k)   = 2.0_MK*ymaxf - xt(2,i)
         xt_offset(1,k) = xt_offset(1,i)
-        xt_offset(2,k) = 2.0_MK*(xmaxf-xt(2,i))
+        xt_offset(2,k) = 2.0_MK*(ymaxf-xt(2,i))
         IF ( ppm_dim == 3 ) THEN
            xt(3,k)   = xt(3,i)
            xt_offset(3,k) = xt_offset(3,i)
diff --git a/src/map/ppm_map_part_ghost_get.f b/src/map/ppm_map_part_ghost_get.f
index 0d3d41a..c5d234a 100644
--- a/src/map/ppm_map_part_ghost_get.f
+++ b/src/map/ppm_map_part_ghost_get.f
@@ -387,15 +387,28 @@
             !  sub cannot be ghosts on other processors. Thus the ghosts must 
             !  be found at the lower/left of the sub
             !-------------------------------------------------------------------
+            
             xmini = xminf + ghostsize
-            xmaxi = xmaxf
+            IF ((ABS(xmaxf - max_phys(1)).LT. eps).AND.lextra(2)) THEN
+                xmaxi = xmaxf - ghostsize
+            ELSE
+                xmaxi = xmaxf
+            ENDIF
 
             ymini = yminf + ghostsize
-            ymaxi = ymaxf
+            IF ((ABS(ymaxf - max_phys(2)).LT. eps).AND.lextra(4)) THEN
+                ymaxi = ymaxf - ghostsize
+            ELSE
+                ymaxi = ymaxf
+            ENDIF
  
             IF (ppm_dim.EQ.3) THEN
                zmini = zminf + ghostsize
-               zmaxi = zmaxf
+               IF ((ABS(zmaxf - max_phys(3)).LT. eps).AND.lextra(6)) THEN
+                   zmaxi = zmaxf - ghostsize
+               ELSE
+                   zmaxi = zmaxf
+               ENDIF
             ENDIF 
          ELSE
             !-------------------------------------------------------------------
@@ -515,7 +528,8 @@
       ENDIF
 
       !-------------------------------------------------------------------------
-      !  Initialize the total number of ghosts incl. those due to periodicity
+      !  Initialize the total number of ghosts incl. those due to boundary
+      !  conditions
       !-------------------------------------------------------------------------
       nghostplus = nghost
 
diff --git a/src/map/test/ppm_module_map_part.fun b/src/map/test/ppm_module_map_part.fun
index 2418b84..2793653 100644
--- a/src/map/test/ppm_module_map_part.fun
+++ b/src/map/test/ppm_module_map_part.fun
@@ -361,7 +361,7 @@ real(mk)                         :: t0,t1,t2,t3
         
         call ppm_topo_check(topoid,p,npart,ok,info)
         assert_true(ok)
-        call ppm_dbg_print_d(topoid,gl,2,1,info,p,npart,mpart)
+        !call ppm_dbg_print_d(topoid,gl,2,1,info,p,npart,mpart)
         call ppm_map_part_store(info)
 
         call ppm_map_part_ghost_put(topoid,info)
@@ -507,7 +507,7 @@ real(mk)                         :: t0,t1,t2,t3
         call ppm_topo_check(topoid,p,npart,ok,info)
 
         assert_true(ok)
-        call ppm_dbg_print_d(topoid,gl,1,1,info,p,npart)
+        !call ppm_dbg_print_d(topoid,gl,1,1,info,p,npart)
 
         call ppm_map_part_ghost_get(topoid,p,ndim,npart,0,gl,info)
         call ppm_map_part_send(npart,mpart,info)
@@ -515,7 +515,69 @@ real(mk)                         :: t0,t1,t2,t3
         
         call ppm_topo_check(topoid,p,npart,ok,info)
         assert_true(ok)
-        call ppm_dbg_print_d(topoid,gl,2,1,info,p,npart,mpart)
+        !call ppm_dbg_print_d(topoid,gl,2,1,info,p,npart,mpart)
+
+
+    end test
+    
+    test get_mixed_bc
+        ! tests symmetric and periodic BC conditions and ghost get
+        use ppm_module_typedef
+        use ppm_module_mktopo
+        use ppm_module_topo_check
+        use ppm_module_util_dbg
+        integer                         :: npart = 256
+        integer                         :: snpart = 16
+        integer                         :: newnpart
+        integer                         :: mpart
+        real(mk),dimension(:,:),pointer :: p => NULL()
+        real(mk), parameter             :: gl = 0.1_mk
+        real(mk)                        :: h
+    
+        h = len_phys(1)/(snpart)
+        allocate(p(ndim,npart))
+        k = 0
+        do i=1,snpart
+            do j=1,snpart
+                k = k + 1
+                p(1,k) = h/2 + (i-1)*h
+                p(2,k) = h/2 + (j-1)*h
+            enddo
+        enddo
+        npart = k
+        bcdef(1:2) = ppm_param_bcdef_periodic
+        bcdef(3:4) = ppm_param_bcdef_symmetry
+        bcdef(5:6) = ppm_param_bcdef_freespace
+        !bcdef(1:6) = ppm_param_bcdef_periodic
+
+        !----------------
+        ! make topology
+        !----------------
+        decomp = ppm_param_decomp_cuboid
+        !decomp = ppm_param_decomp_xpencil
+        assig  = ppm_param_assign_internal
+
+        topoid = 0
+
+        call ppm_mktopo(topoid,p,npart,decomp,assig,min_phys,max_phys,bcdef, &
+        &               gl,cost,info)
+
+        call ppm_map_part_global(topoid,p,npart,info)
+        call ppm_map_part_send(npart,newnpart,info)
+        call ppm_map_part_pop(p,ndim,npart,newnpart,info)
+        npart=newnpart
+
+        call ppm_topo_check(topoid,p,npart,ok,info)
+
+        assert_true(ok)
+
+        call ppm_map_part_ghost_get(topoid,p,ndim,npart,1,gl,info)
+        call ppm_map_part_send(npart,mpart,info)
+        call ppm_map_part_pop(p,ndim,npart,mpart,info)
+        assert_equal(mpart-npart,104)
+        call ppm_topo_check(topoid,p,npart,ok,info)
+        assert_true(ok)
+        !call ppm_dbg_print_d(topoid,gl,1,1,info,p,npart,mpart)
 
 
     end test
