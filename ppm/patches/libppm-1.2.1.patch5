diff --git a/src/ppm_module_util_dbg.f b/src/ppm_module_util_dbg.f
index 5c99d85..642e50c 100644
--- a/src/ppm_module_util_dbg.f
+++ b/src/ppm_module_util_dbg.f
@@ -32,6 +32,8 @@
       !-------------------------------------------------------------------------
 #define __SINGLE_PRECISION 1
 #define __DOUBLE_PRECISION 2
+#define __SCALAR 3
+#define __VECTOR 4
 
       MODULE ppm_module_util_dbg
       !!! This module provides the routines
@@ -40,15 +42,27 @@
          !  Define interfaces to the main topology routine(s)
          !----------------------------------------------------------------------
          INTERFACE ppm_dbg_print
-            MODULE PROCEDURE ppm_dbg_print_s
-            MODULE PROCEDURE ppm_dbg_print_d
+            MODULE PROCEDURE dbg_print_sca_s
+            MODULE PROCEDURE dbg_print_sca_d
+            MODULE PROCEDURE dbg_print_vec_s
+            MODULE PROCEDURE dbg_print_vec_d
          END INTERFACE
 
          !----------------------------------------------------------------------
          !  include the source
          !----------------------------------------------------------------------
          CONTAINS
+#define __CTAG __SCALAR
+#define __KIND __SINGLE_PRECISION
+#include "util/ppm_dbg_print.f"
+#undef __KIND
+
+#define __KIND __DOUBLE_PRECISION
+#include "util/ppm_dbg_print.f"
+#undef __KIND
+#undef __CTAG
 
+#define __CTAG __VECTOR
 #define __KIND __SINGLE_PRECISION
 #include "util/ppm_dbg_print.f"
 #undef __KIND
@@ -56,6 +70,7 @@
 #define __KIND __DOUBLE_PRECISION
 #include "util/ppm_dbg_print.f"
 #undef __KIND
+#undef __CTAG
 
 
       END MODULE ppm_module_util_dbg
diff --git a/src/util/ppm_dbg_print.f b/src/util/ppm_dbg_print.f
index e2df6ff..2ac152a 100644
--- a/src/util/ppm_dbg_print.f
+++ b/src/util/ppm_dbg_print.f
@@ -26,10 +26,18 @@
       ! ETH Zurich
       ! CH-8092 Zurich, Switzerland
       !-------------------------------------------------------------------------
+#if   __CTAG == __SCALAR
 #if   __KIND == __SINGLE_PRECISION
-SUBROUTINE ppm_dbg_print_s(topoid,ghostlayer,step,colortag,info,xp,np,mp,append)
+SUBROUTINE dbg_print_sca_s(topoid,ghostlayer,step,colortag,info,xp,np,mp,append)
 #elif __KIND == __DOUBLE_PRECISION
-SUBROUTINE ppm_dbg_print_d(topoid,ghostlayer,step,colortag,info,xp,np,mp,append)
+SUBROUTINE dbg_print_sca_d(topoid,ghostlayer,step,colortag,info,xp,np,mp,append)
+#endif
+#elif   __CTAG == __VECTOR
+#if   __KIND == __SINGLE_PRECISION
+SUBROUTINE dbg_print_vec_s(topoid,ghostlayer,step,colortag,info,xp,np,mp,append)
+#elif __KIND == __DOUBLE_PRECISION
+SUBROUTINE dbg_print_vec_d(topoid,ghostlayer,step,colortag,info,xp,np,mp,append)
+#endif
 #endif
       !!! This routine provides a simple means to visualize particles and
       !!! domain decompositions for debugging and monitoring purposes.
@@ -71,8 +79,13 @@ SUBROUTINE ppm_dbg_print_d(topoid,ghostlayer,step,colortag,info,xp,np,mp,append)
       INTEGER,            INTENT(IN)    :: step
       !!! parameter can be used to create distinct output dump files for each
       !!! timestep
+#if   __CTAG == __SCALAR
       INTEGER,            INTENT(IN)    :: colortag
-      !!! a tag to be able to print out different groups of particles
+#elif __CTAG == __VECTOR
+      INTEGER, DIMENSION(:), POINTER    :: colortag
+#endif
+      !!! a tag to be able to print out different groups of particles or
+      !!! visualize a property
       INTEGER,            INTENT(OUT)   :: info
       REAL(mk), DIMENSION(:,:), POINTER,OPTIONAL :: xp
       !!! a particle position array, this argument is optional
@@ -96,9 +109,12 @@ SUBROUTINE ppm_dbg_print_d(topoid,ghostlayer,step,colortag,info,xp,np,mp,append)
 #ifdef __MPI
       INTEGER, DIMENSION(:),    POINTER :: allnp   => NULL()
       INTEGER, DIMENSION(:),    POINTER :: allmp   => NULL()
+#if   __CTAG == __SCALAR
       INTEGER, DIMENSION(:),    POINTER :: allctag => NULL()
+#elif __CTAG == __VECTOR
+      INTEGER, DIMENSION(:,:),  POINTER :: allctag => NULL()
+#endif
       REAL(mk), DIMENSION(:,:,:),POINTER:: allxp   => NULL()
-      INTEGER, DIMENSION(:,:),  POINTER :: buf     => NULL()
       INTEGER, DIMENSION(3)             :: lda
       INTEGER                           :: maxmp
       INTEGER                           :: iproc
@@ -156,7 +172,9 @@ SUBROUTINE ppm_dbg_print_d(topoid,ghostlayer,step,colortag,info,xp,np,mp,append)
           lda(1) = ppm_nproc
           CALL ppm_alloc(allnp,lda,ppm_param_alloc_fit,info)
           CALL ppm_alloc(allmp,lda,ppm_param_alloc_fit,info)
+#if   __CTAG == __SCALAR
           CALL ppm_alloc(allctag,lda,ppm_param_alloc_fit,info)
+#endif
           IF (info .NE. 0) THEN
               info = ppm_error_fatal
               CALL ppm_error(ppm_err_alloc,'ppm_dbg_print',     &
@@ -166,8 +184,10 @@ SUBROUTINE ppm_dbg_print_d(topoid,ghostlayer,step,colortag,info,xp,np,mp,append)
           ! gather the np and mp at the root
           CALL mpi_gather(np,1,MPI_INTEGER,allnp,1,MPI_INTEGER,0,ppm_comm,info)
           CALL mpi_gather(mpart,1,MPI_INTEGER,allmp,1,MPI_INTEGER,0,ppm_comm,info)
+#if   __CTAG == __SCALAR
           CALL mpi_gather(colortag,1,MPI_INTEGER,allctag,1,MPI_INTEGER,0,&
           &               ppm_comm,info)
+#endif
           IF (info .NE. 0) THEN
               info = ppm_error_fatal
               CALL ppm_error(ppm_err_mpi_fail,'ppm_dbg_print',     &
@@ -182,11 +202,15 @@ SUBROUTINE ppm_dbg_print_d(topoid,ghostlayer,step,colortag,info,xp,np,mp,append)
               lda(2) = maxmp
               lda(3) = ppm_nproc
               CALL ppm_alloc(allxp,lda,ppm_param_alloc_fit,info)
-              CALL ppm_alloc(buf,lda,ppm_param_alloc_fit,info)
+#if __CTAG == __VECTOR
+              lda(1) = maxmp
+              lda(2) = ppm_nproc
+              CALL ppm_alloc(allctag,lda,ppm_param_alloc_fit,info)
+#endif
               IF (info .NE. 0) THEN
                   info = ppm_error_fatal
                   CALL ppm_error(ppm_err_alloc,'ppm_dbg_print',     &
-         &            'failed to allocate allxp or buf',__LINE__,info)
+         &            'failed to allocate allxp',__LINE__,info)
                   GOTO 9999
               ENDIF
               
@@ -201,6 +225,9 @@ SUBROUTINE ppm_dbg_print_d(topoid,ghostlayer,step,colortag,info,xp,np,mp,append)
               
               DO i=1,allmp(1)
                   allxp(:,i,1) = xp(:,i)
+#if __CTAG == __VECTOR
+                  allctag(i,1) = colortag(i)
+#endif
               ENDDO
 
               ! now let all procs communicate with rank 0
@@ -214,6 +241,17 @@ SUBROUTINE ppm_dbg_print_d(topoid,ghostlayer,step,colortag,info,xp,np,mp,append)
      &                'failed to sendrecv xp',__LINE__,info)
                       GOTO 9999
                   ENDIF
+#if __CTAG == __VECTOR
+                  CALL mpi_recv(allctag(:,:,iproc+1),allmp(iproc+1),&
+                  &             MPI_INTEGER,iproc,  &
+                  &             0,ppm_comm,MPI_STATUS_IGNORE,info)
+                  IF (info .NE. 0) THEN
+                      info = ppm_error_fatal
+                      CALL ppm_error(ppm_err_mpi_fail,'ppm_dbg_print',   &
+     &                'failed to sendrecv ctag',__LINE__,info)
+                      GOTO 9999
+                  ENDIF
+#endif
               ENDDO
               IF (present(append).AND.append) then
                   OPEN(iunit,file=pfname,access='append')
@@ -222,17 +260,27 @@ SUBROUTINE ppm_dbg_print_d(topoid,ghostlayer,step,colortag,info,xp,np,mp,append)
               ENDIF
               DO iproc=1,ppm_nproc
                   DO i=1,allnp(iproc)
+#if __CTAG == __SCALAR
                       WRITE(iunit,pfmt) allxp(:,i,iproc),allctag(iproc)
+#elif __CTAG == __VECTOR
+                      WRITE(iunit,pfmt) allxp(:,i,iproc),allctag(i,iproc)
+#endif
                   ENDDO
                   DO i=allnp(iproc)+1,allmp(iproc)
+#if __CTAG == __SCALAR
                       WRITE(iunit,pfmt) allxp(:,i,iproc),-1
+#elif __CTAG == __VECTOR
+                      WRITE(iunit,pfmt) allxp(:,i,iproc),allctag(i,iproc)
+#endif
                   ENDDO
               ENDDO
               CLOSE(iunit)
               CALL ppm_alloc(allxp,lda,ppm_param_dealloc,info)
-              CALL ppm_alloc(buf,lda,ppm_param_dealloc,info)
           ELSE
               CALL mpi_send(xp,mpart*ppm_dim,ppm_mpi_kind,0,0,ppm_comm,info)
+#if __CTAG == __VECTOR
+              CALL mpi_send(colortag,mpart,MPI_INTEGER,0,0,ppm_comm,info)
+#endif
           ENDIF
 #else  
           IF (present(append).AND.append) then
@@ -241,10 +289,18 @@ SUBROUTINE ppm_dbg_print_d(topoid,ghostlayer,step,colortag,info,xp,np,mp,append)
               OPEN(iunit,file=pfname)
           ENDIF
           DO i=1,np
+#if __CTAG == __SCALAR
               WRITE(iunit,pfmt) xp(:,i),colortag
+#elif __CTAG == __VECTOR
+              WRITE(iunit,pfmt) xp(:,i),colortag(i)
+#endif
           ENDDO
           DO i=np+1,mpart
+#if __CTAG == __SCALAR
               WRITE(iunit,pfmt) xp(:,i),-1
+#elif __CTAG == __VECTOR
+              WRITE(iunit,pfmt) xp(:,i),colortag(i)
+#endif
           ENDDO
           CLOSE(iunit)
 #endif
@@ -255,8 +311,16 @@ SUBROUTINE ppm_dbg_print_d(topoid,ghostlayer,step,colortag,info,xp,np,mp,append)
 9999  CONTINUE
       CALL substop('ppm_dbg_print',t0,info)
 
+#if   __CTAG == __SCALAR
+#if   __KIND == __SINGLE_PRECISION
+END SUBROUTINE dbg_print_sca_s
+#elif __KIND == __DOUBLE_PRECISION
+END SUBROUTINE dbg_print_sca_d
+#endif
+#elif   __CTAG == __VECTOR
 #if   __KIND == __SINGLE_PRECISION
-end SUBROUTINE ppm_dbg_print_s
+END SUBROUTINE dbg_print_vec_s
 #elif __KIND == __DOUBLE_PRECISION
-end SUBROUTINE ppm_dbg_print_d
+END SUBROUTINE dbg_print_vec_d
+#endif
 #endif
