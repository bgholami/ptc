# This Makefile.in created by simplemake.  Do not edit

# @configure_input@

# --------------------------------------------------------------------------
all: all-redirect

SHELL           = @SHELL@
AR              = @AR@
AR_FLAGS        = @AR_FLAGS@
RANLIB          = @RANLIB@
INSTALL         = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT  = @INSTALL_SCRIPT@
INSTALL_DATA    = @INSTALL_DATA@
MKDIR_P         = @MKDIR_P@
top_builddir    = @master_top_builddir@
abs_builddir    = @abs_builddir@
master_top_srcdir  = @master_top_srcdir@
srcdir          = @srcdir@
abs_srcdir      = @abs_srcdir@
prefix          = @prefix@
exec_prefix     = @exec_prefix@
bindir          = @bindir@
DEFS            = @DEFS@ -I. -I${srcdir}
CPPFLAGS        = @CPPFLAGS@
LIBS            = @LIBS@
MAKE            = @MAKE@
MPILIBNAME      = @MPILIBNAME@
CC              = @CC@
CFLAGS          = @CFLAGS@ $(MPICH2_MAKE_CFLAGS)
C_COMPILE       = $(CC) $(DEFS) $(INCLUDES) $(CFLAGS) $(CPPFLAGS)
C_LINK         = $(CC)
LIBTOOL         = @LIBTOOL@
CC_SHL          = @CC_SHL@
C_COMPILE_SHL   = $(CC_SHL) $(DEFS) $(INCLUDES) $(CFLAGS) $(CPPFLAGS)
LDFLAGS     =  @LDFLAGS@ 

VPATH = .:@srcdir@
win_sources = smpd_job.c smpd_mapdrive.c smpd_register.c smpd_ad.cpp smpd_affinitize.c smpd_ccp_util.c smpd_hpc_js_rmk.cpp smpd_hpc_js_bs.cpp smpd_hpc_js_util.cpp
INCLUDES = -I${master_top_srcdir}/src/include -I${master_top_srcdir}/src/pmi/smpd -I${master_top_srcdir}/src/pm/smpd/sock/include -I${master_top_srcdir}/src/pm/smpd/sock/@smpd_sock_name@ -I${top_builddir}/src/include -I${top_builddir}/src/pm/smpd -I${top_builddir}/src/pm/smpd/sock/@smpd_sock_name@ 

.SUFFIXES:
.SUFFIXES: .o .lo .c 
.c.o:
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC              $<" ; \
	else \
	  echo $(C_COMPILE) -c $< ; \
	fi
	@$(C_COMPILE) -c $<
.c.lo:
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC              $<" ; \
	else \
	  echo $(C_COMPILE_SHL) -c $< -o _s$*.o ; \
	echo mv -f _s$*.o $*.lo ; \
	fi
	@$(C_COMPILE_SHL) -c $< -o _s$*.o
	@mv -f _s$*.o $*.lo
.c:
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC              $<" ; \
	else \
	  echo $(C_COMPILE) -o $* $< $(LDFLAGS) $(LIBS) ; \
	fi
	@$(C_COMPILE) -o $* $< $(LDFLAGS) $(LIBS)
apply: 
	$(ACTION) $(ACTION_INPUT)
	for dir in ../../util/mem ./sock sock ; do \
		(cd $$dir && ${MAKE} apply ) ; done
clean: 
	-@rm -f *.o ${srcdir}/*.o mpiexec smpd
	-@rm -f .libstamp0 .libstamp1 
	-@rm -f mpiexec.exe smpd.exe
	-@rm -f core core.[0-9]*
	-@rm -f *.lo ${srcdir}/*.lo
	-@rm -f *.irlog*
	for dir in ../../util/mem ./sock sock ; do \
		(cd $$dir && ${MAKE} clean ) ; done
distclean:  clean distclean-local distclean-xxx remove-makefile
distclean-xxx:
	for dir in ../../util/mem ./sock sock ; do \
		if [ ! -s $$dir/Makefile ] ; then continue ; fi ;\
		(cd $$dir && ${MAKE} distclean ) ; done
	-@rm -f Makefile localdefs config.status config.log config.cache *conf.cache config.system
	-@rm -rf autom4te*.cache
	-@rm -f smpdconf.h
	-@rm -rf $(DEPS_DIR)
	-@rm -f TAGS
remove-makefile:
	rm -f Makefile
remove-genmakefiles:
	rm -f  Makefile
all-redirect:
	@(cd ../../util/mem && ${MAKE} all )
	@(cd ./sock && ${MAKE} all )
	@(cd sock && ${MAKE} all )
	${MAKE} all-local
all-local: .libstamp0 ../../../lib/lib${MPILIBNAME}.a mpiexec smpd
	@if [ "@ENABLE_SHLIB@" != "none" ] ; then \
	    ${MAKE} .libstamp1 || exit 1; \
	fi
	${MAKE} all-postamble

.libstamp0 ../../../lib/lib${MPILIBNAME}.a: smpd_hash.o smpd_authenticate.o smpd_printf.o \
	smpd_read_write.o smpd_user_data.o smpd_connect.o smpd_get_opt.o smpd_launch_process.o \
	smpd_command.o smpd_database.o smpd_state_machine.o smpd_handle_command.o smpd_session.o \
	smpd_start_mgr.o smpd_barrier.o smpd_do_console.o smpd_restart.o smpd_host_util.o \
	smpd_handle_spawn.o 
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  AR ${AR_FLAGS} ../../../lib/lib${MPILIBNAME}.a $?" ; \
	else \
	  echo ${AR} ${AR_FLAGS} ../../../lib/lib${MPILIBNAME}.a $? ; \
	fi
	@${AR} ${AR_FLAGS} ../../../lib/lib${MPILIBNAME}.a $?
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  RANLIB          lib${MPILIBNAME}.a" ; \
	else \
	  echo ${RANLIB} ../../../lib/lib${MPILIBNAME}.a ; \
	fi
	@${RANLIB} ../../../lib/lib${MPILIBNAME}.a
	date > .libstamp0
.libstamp1 ../../../lib/lib${MPILIBNAME}.la: smpd_hash.lo smpd_authenticate.lo smpd_printf.lo \
	smpd_read_write.lo smpd_user_data.lo smpd_connect.lo smpd_get_opt.lo \
	smpd_launch_process.lo smpd_command.lo smpd_database.lo smpd_state_machine.lo \
	smpd_handle_command.lo smpd_session.lo smpd_start_mgr.lo smpd_barrier.lo \
	smpd_do_console.lo smpd_restart.lo smpd_host_util.lo smpd_handle_spawn.lo 
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  AR ${AR_FLAGS} ../../../lib/lib${MPILIBNAME}.la $?" ; \
	else \
	  echo ${AR} ${AR_FLAGS} ../../../lib/lib${MPILIBNAME}.la $? ; \
	fi
	@${AR} ${AR_FLAGS} ../../../lib/lib${MPILIBNAME}.la $?
	date > .libstamp1
mpiexec: mpiexec.o mp_parse_command_line.o mp_parse_oldconfig.o mpiexec_rsh.o \
	 ../../../lib/lib${MPILIBNAME}.a ../../../lib/libmpl.a 
	$(C_LINK) $(CFLAGS) $(LDFLAGS) -o mpiexec mpiexec.o mp_parse_command_line.o \
	mp_parse_oldconfig.o mpiexec_rsh.o  -L../../../lib -L${master_top_srcdir}/lib -lmpich \
	-lmpl ${LIBS} 
smpd: smpd.o smpd_cmd_args.o smpd_watchprocs.o \
	 ../../../lib/lib${MPILIBNAME}.a ../../../lib/libmpl.a 
	$(C_LINK) $(CFLAGS) $(LDFLAGS) -o smpd smpd.o smpd_cmd_args.o smpd_watchprocs.o  \
	-L../../../lib -L${master_top_srcdir}/lib -lmpich -lmpl ${LIBS} 
# --------------------------------------------------------------------------
# Install target
install:  FORCE_TARGET 
	if [ ! -d ${DESTDIR}${exec_prefix} ] ; then $(MKDIR_P) ${DESTDIR}${exec_prefix} ; fi
	if [ ! -d ${DESTDIR}${prefix} ] ; then $(MKDIR_P) ${DESTDIR}${prefix} ; fi
	if [ ! -d ${DESTDIR}${bindir} ] ; then $(MKDIR_P) ${DESTDIR}${bindir} ; fi
	$(INSTALL_PROGRAM) $(INSTALL_STRIP_FLAG)  mpiexec ${DESTDIR}${bindir}/mpiexec
	$(INSTALL_PROGRAM) $(INSTALL_STRIP_FLAG)  smpd ${DESTDIR}${bindir}/smpd

install-strip:
	$(MAKE) INSTALL_STRIP_FLAG=-s install
uninstall: 
	-rm -f ${DESTDIR}${bindir}/mpiexec
	-rm -f ${DESTDIR}${bindir}/smpd
installcheck: 
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
SOURCES         =  smpd_hash.c smpd_authenticate.c smpd_printf.c smpd_read_write.c \
	smpd_user_data.c smpd_connect.c smpd_get_opt.c smpd_launch_process.c smpd_command.c \
	smpd_database.c smpd_state_machine.c smpd_handle_command.c smpd_session.c \
	smpd_start_mgr.c smpd_barrier.c smpd_do_console.c smpd_restart.c smpd_host_util.c \
	smpd_handle_spawn.c mpiexec.c mp_parse_command_line.c mp_parse_oldconfig.c mpiexec_rsh.c \
	smpd.c smpd_cmd_args.c smpd_watchprocs.c 
HEADERFILES     = $(HEADERS)
SOURCEFILES     = $(SOURCES)
# --------------------------------------------------------------------------



# Rules to build MPL before SMPD
../../../lib/libmpl.a:
	build_prefix=`cd ../../.. && pwd` && \
	for dir in ../../../src/mpl ; do \
	    (cd $$dir && ${MAKE} prefix=$$build_prefix exec_prefix=$$build_prefix \
	    bindir=$$build_prefix/bin install) ; \
	done

all-postamble: mpiexec smpd

distclean-local:
	@-rm -f smpdconf.h

.POSIX:

FORCE_TARGET:

