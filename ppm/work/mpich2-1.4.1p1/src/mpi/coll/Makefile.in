# This Makefile.in created by simplemake.  Do not edit

# @configure_input@

# --------------------------------------------------------------------------
all: all-redirect

SHELL           = @SHELL@
AR              = @AR@
AR_FLAGS        = @AR_FLAGS@
RANLIB          = @RANLIB@
top_builddir    = @master_top_builddir@
abs_builddir    = @abs_builddir@
master_top_srcdir  = @master_top_srcdir@
srcdir          = @srcdir@
abs_srcdir      = @abs_srcdir@
top_srcdir      = @top_srcdir@
DEFS            = @DEFS@ -I. -I${srcdir}
CPPFLAGS        = @CPPFLAGS@
MAKE            = @MAKE@
MPILIBNAME      = @MPILIBNAME@
PMPILIBNAME     = @PMPILIBNAME@

CC              = @CC@
CFLAGS          = @CFLAGS@ $(MPICH2_MAKE_CFLAGS)
C_COMPILE       = $(CC) $(DEFS) $(INCLUDES) $(CFLAGS) $(CPPFLAGS)
LIBTOOL         = @LIBTOOL@
CC_SHL          = @CC_SHL@
C_COMPILE_SHL   = $(CC_SHL) $(DEFS) $(INCLUDES) $(CFLAGS) $(CPPFLAGS)

VPATH = .:@srcdir@
mpi_sources = allreduce.c barrier.c op_create.c op_free.c \
 bcast.c alltoall.c alltoallv.c reduce.c scatter.c \
 gather.c scatterv.c gatherv.c scan.c exscan.c allgather.c allgatherv.c \
 red_scat.c alltoallw.c reduce_local.c op_commutative.c red_scat_block.c
INCLUDES = -I../../include -I${top_srcdir}/src/include -I${top_srcdir}/src/mpi/datatype

.SUFFIXES:
.SUFFIXES: .o .lo .c 
.c.o:
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC              $<" ; \
	else \
	  echo $(C_COMPILE) -c $< ; \
	fi
	@$(C_COMPILE) -c $<
.c.lo:
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC              $<" ; \
	else \
	  echo $(C_COMPILE_SHL) -c $< -o _s$*.o ; \
	echo mv -f _s$*.o $*.lo ; \
	fi
	@$(C_COMPILE_SHL) -c $< -o _s$*.o
	@mv -f _s$*.o $*.lo
.c:
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC              $<" ; \
	else \
	  echo $(C_COMPILE) -o $* $< $(LDFLAGS) $(LIBS) ; \
	fi
	@$(C_COMPILE) -o $* $< $(LDFLAGS) $(LIBS)
apply: 
	$(ACTION) $(ACTION_INPUT)
clean: 
	-@rm -f *.o ${srcdir}/*.o 
	-@rm -f .libstamp0 .libstamp1 .libstamp2 .libstamp3 
	-@rm -f *.lo ${srcdir}/*.lo
distclean:  clean distclean-xxx remove-makefile
distclean-xxx:
	-@rm -f Makefile
	-@rm -rf autom4te*.cache
	-@rm -rf $(DEPS_DIR)
	-@rm -f TAGS
remove-makefile:
	rm -f Makefile
remove-genmakefiles:
	rm -f  Makefile
all-redirect: .libstamp0 ../../../lib/lib${MPILIBNAME}.a
	@if [ -n "@NO_WEAK_SYM@" ] ; then \
	    ${MAKE} .libstamp2 || exit 1; \
	fi
	@if [ "@ENABLE_SHLIB@" != "none" ] ; then \
	    ${MAKE} .libstamp1 || exit 1; \
	    if [ -n "@NO_WEAK_SYM@" ] ; then \
	        ${MAKE} .libstamp3 || exit 1; \
	    fi ; \
	fi

.libstamp0 ../../../lib/lib${MPILIBNAME}.a: allreduce.o barrier.o op_create.o op_free.o bcast.o \
	alltoall.o alltoallv.o reduce.o scatter.o gather.o scatterv.o gatherv.o scan.o exscan.o \
	allgather.o allgatherv.o red_scat.o alltoallw.o reduce_local.o op_commutative.o \
	red_scat_block.o helper_fns.o opsum.o opmax.o opmin.o opband.o opbor.o opbxor.o opland.o \
	oplor.o oplxor.o opprod.o opminloc.o opmaxloc.o 
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  AR ${AR_FLAGS} ../../../lib/lib${MPILIBNAME}.a $?" ; \
	else \
	  echo ${AR} ${AR_FLAGS} ../../../lib/lib${MPILIBNAME}.a $? ; \
	fi
	@${AR} ${AR_FLAGS} ../../../lib/lib${MPILIBNAME}.a $?
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  RANLIB          lib${MPILIBNAME}.a" ; \
	else \
	  echo ${RANLIB} ../../../lib/lib${MPILIBNAME}.a ; \
	fi
	@${RANLIB} ../../../lib/lib${MPILIBNAME}.a
	date > .libstamp0
.libstamp1 ../../../lib/lib${MPILIBNAME}.la: allreduce.lo barrier.lo op_create.lo op_free.lo \
	bcast.lo alltoall.lo alltoallv.lo reduce.lo scatter.lo gather.lo scatterv.lo gatherv.lo \
	scan.lo exscan.lo allgather.lo allgatherv.lo red_scat.lo alltoallw.lo reduce_local.lo \
	op_commutative.lo red_scat_block.lo helper_fns.lo opsum.lo opmax.lo opmin.lo opband.lo \
	opbor.lo opbxor.lo opland.lo oplor.lo oplxor.lo opprod.lo opminloc.lo opmaxloc.lo 
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  AR ${AR_FLAGS} ../../../lib/lib${MPILIBNAME}.la $?" ; \
	else \
	  echo ${AR} ${AR_FLAGS} ../../../lib/lib${MPILIBNAME}.la $? ; \
	fi
	@${AR} ${AR_FLAGS} ../../../lib/lib${MPILIBNAME}.la $?
	date > .libstamp1

# --------------------------------------------------------------------------
.libstamp2: _allreduce.o _barrier.o _op_create.o _op_free.o _bcast.o _alltoall.o _alltoallv.o _reduce.o \
	_scatter.o _gather.o _scatterv.o _gatherv.o _scan.o _exscan.o _allgather.o _allgatherv.o \
	_red_scat.o _alltoallw.o _reduce_local.o _op_commutative.o _red_scat_block.o 
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  AR ${AR_FLAGS} ../../../lib/lib${PMPILIBNAME}.a $?" ; \
	else \
	  echo ${AR} ${AR_FLAGS} ../../../lib/lib${PMPILIBNAME}.a $? ; \
	fi
	@${AR} ${AR_FLAGS} ../../../lib/lib${PMPILIBNAME}.a $?
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  RANLIB          lib${PMPILIBNAME}.a" ; \
	else \
	  echo ${RANLIB} ../../../lib/lib${PMPILIBNAME}.a ; \
	fi
	@${RANLIB} ../../../lib/lib${PMPILIBNAME}.a
	date > .libstamp2
.libstamp3: _allreduce.lo _barrier.lo _op_create.lo _op_free.lo _bcast.lo _alltoall.lo _alltoallv.lo \
	_reduce.lo _scatter.lo _gather.lo _scatterv.lo _gatherv.lo _scan.lo _exscan.lo \
	_allgather.lo _allgatherv.lo _red_scat.lo _alltoallw.lo _reduce_local.lo \
	_op_commutative.lo _red_scat_block.lo 
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  AR ${AR_FLAGS} ../../../lib/lib${PMPILIBNAME}.la $?" ; \
	else \
	  echo ${AR} ${AR_FLAGS} ../../../lib/lib${PMPILIBNAME}.la $? ; \
	fi
	@${AR} ${AR_FLAGS} ../../../lib/lib${PMPILIBNAME}.la $?
	date > .libstamp3
_allreduce.o: allreduce.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/allreduce.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/allreduce.c -o _allreduce.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/allreduce.c -o _allreduce.o
_allreduce.lo: allreduce.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/allreduce.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/allreduce.c -o _allreduce.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/allreduce.c -o _allreduce.lo
_barrier.o: barrier.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/barrier.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/barrier.c -o _barrier.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/barrier.c -o _barrier.o
_barrier.lo: barrier.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/barrier.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/barrier.c -o _barrier.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/barrier.c -o _barrier.lo
_op_create.o: op_create.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/op_create.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/op_create.c -o _op_create.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/op_create.c -o _op_create.o
_op_create.lo: op_create.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/op_create.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/op_create.c -o _op_create.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/op_create.c -o _op_create.lo
_op_free.o: op_free.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/op_free.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/op_free.c -o _op_free.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/op_free.c -o _op_free.o
_op_free.lo: op_free.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/op_free.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/op_free.c -o _op_free.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/op_free.c -o _op_free.lo
_bcast.o: bcast.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/bcast.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/bcast.c -o _bcast.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/bcast.c -o _bcast.o
_bcast.lo: bcast.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/bcast.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/bcast.c -o _bcast.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/bcast.c -o _bcast.lo
_alltoall.o: alltoall.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/alltoall.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/alltoall.c -o _alltoall.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/alltoall.c -o _alltoall.o
_alltoall.lo: alltoall.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/alltoall.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/alltoall.c -o _alltoall.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/alltoall.c -o _alltoall.lo
_alltoallv.o: alltoallv.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/alltoallv.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/alltoallv.c -o _alltoallv.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/alltoallv.c -o _alltoallv.o
_alltoallv.lo: alltoallv.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/alltoallv.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/alltoallv.c -o _alltoallv.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/alltoallv.c -o _alltoallv.lo
_reduce.o: reduce.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/reduce.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/reduce.c -o _reduce.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/reduce.c -o _reduce.o
_reduce.lo: reduce.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/reduce.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/reduce.c -o _reduce.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/reduce.c -o _reduce.lo
_scatter.o: scatter.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/scatter.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/scatter.c -o _scatter.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/scatter.c -o _scatter.o
_scatter.lo: scatter.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/scatter.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/scatter.c -o _scatter.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/scatter.c -o _scatter.lo
_gather.o: gather.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/gather.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/gather.c -o _gather.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/gather.c -o _gather.o
_gather.lo: gather.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/gather.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/gather.c -o _gather.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/gather.c -o _gather.lo
_scatterv.o: scatterv.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/scatterv.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/scatterv.c -o _scatterv.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/scatterv.c -o _scatterv.o
_scatterv.lo: scatterv.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/scatterv.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/scatterv.c -o _scatterv.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/scatterv.c -o _scatterv.lo
_gatherv.o: gatherv.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/gatherv.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/gatherv.c -o _gatherv.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/gatherv.c -o _gatherv.o
_gatherv.lo: gatherv.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/gatherv.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/gatherv.c -o _gatherv.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/gatherv.c -o _gatherv.lo
_scan.o: scan.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/scan.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/scan.c -o _scan.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/scan.c -o _scan.o
_scan.lo: scan.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/scan.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/scan.c -o _scan.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/scan.c -o _scan.lo
_exscan.o: exscan.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/exscan.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/exscan.c -o _exscan.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/exscan.c -o _exscan.o
_exscan.lo: exscan.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/exscan.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/exscan.c -o _exscan.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/exscan.c -o _exscan.lo
_allgather.o: allgather.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/allgather.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/allgather.c -o _allgather.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/allgather.c -o _allgather.o
_allgather.lo: allgather.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/allgather.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/allgather.c -o _allgather.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/allgather.c -o _allgather.lo
_allgatherv.o: allgatherv.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/allgatherv.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/allgatherv.c -o _allgatherv.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/allgatherv.c -o _allgatherv.o
_allgatherv.lo: allgatherv.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/allgatherv.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/allgatherv.c -o _allgatherv.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/allgatherv.c -o _allgatherv.lo
_red_scat.o: red_scat.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/red_scat.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/red_scat.c -o _red_scat.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/red_scat.c -o _red_scat.o
_red_scat.lo: red_scat.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/red_scat.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/red_scat.c -o _red_scat.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/red_scat.c -o _red_scat.lo
_alltoallw.o: alltoallw.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/alltoallw.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/alltoallw.c -o _alltoallw.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/alltoallw.c -o _alltoallw.o
_alltoallw.lo: alltoallw.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/alltoallw.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/alltoallw.c -o _alltoallw.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/alltoallw.c -o _alltoallw.lo
_reduce_local.o: reduce_local.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/reduce_local.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/reduce_local.c -o _reduce_local.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/reduce_local.c -o _reduce_local.o
_reduce_local.lo: reduce_local.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/reduce_local.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/reduce_local.c -o _reduce_local.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/reduce_local.c -o _reduce_local.lo
_op_commutative.o: op_commutative.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/op_commutative.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/op_commutative.c -o _op_commutative.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/op_commutative.c -o _op_commutative.o
_op_commutative.lo: op_commutative.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/op_commutative.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/op_commutative.c -o _op_commutative.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/op_commutative.c -o _op_commutative.lo
_red_scat_block.o: red_scat_block.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/red_scat_block.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/red_scat_block.c -o _red_scat_block.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/red_scat_block.c -o _red_scat_block.o
_red_scat_block.lo: red_scat_block.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/red_scat_block.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/red_scat_block.c -o _red_scat_block.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/red_scat_block.c -o _red_scat_block.lo
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
SOURCES         =  allreduce.c barrier.c op_create.c op_free.c bcast.c alltoall.c alltoallv.c \
	reduce.c scatter.c gather.c scatterv.c gatherv.c scan.c exscan.c allgather.c allgatherv.c \
	red_scat.c alltoallw.c reduce_local.c op_commutative.c red_scat_block.c helper_fns.c \
	opsum.c opmax.c opmin.c opband.c opbor.c opbxor.c opland.c oplor.c oplxor.c opprod.c \
	opminloc.c opmaxloc.c 
HEADERFILES     = $(HEADERS)
SOURCEFILES     = $(SOURCES)
# --------------------------------------------------------------------------
# mpi_sources includes only the routines that are MPI function entry points
# The code for the MPI operations (e.g., MPI_SUM) is not included in 
# mpi_sources




.POSIX:

FORCE_TARGET:

